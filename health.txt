--------------------------------01、项目概述和环境搭建--------------------------------------
一、系统架构的演变
	1、单体架构：所有模块都在一个war包里，问题：
		扩展受限：无法针对特定模块扩展
		技术债务：不坏不修
		代码耦合：依赖关系不清楚，每次修改都心惊胆战
		迭代困难：随着代码增多，测试、部署的时间会增多
		阻碍创新：引入新技术非常苦难
	2、分布式架构：按照业务逻辑把系统拆分成独立的模块，问题：
		公共业务逻辑无法复用
	3、SOA架构：在分布式架构的基础上，把模块拆分成服务层、表现层，问题：
		Mule：不支持集群
		WSO2：臃肿
		服务调用紊乱
	4、微服务：服务治理方案，代表技术：zookeeper/eureka

二、dubbo介绍
	1、什么是dubbo？
		dubbo[ˈdʌbəʊ]是阿里巴巴一个开源的rpc框架，能和spring无缝集成，dubbo角色如下：
			provider：服务提供者(service、mapper)
			registry：注册中心(zookeeper)
			consumer：服务消费者(controller)
三、zookeeper介绍
	1、什么是zookeeper？
		zookeeper负责地址的注册与查找，是服务提供者和服务调用者的注册中心
	2、zookeeper的安装和启动
		安装：
			解压到桌面
		启动：
			双击/bin/zkServer.cmd
		关闭：
			把窗口关闭
		测试：
			双击/bin/zkCli.cmd
三、dubbo入门
	1、创建工程
		  dubbox_parent：pom，定义依赖
			dubbox_consumer：war
			dubbox_interface：jar
			dubbox_provider：war
	2、发布服务：dubbox_provider
		1、配置zookeeper地址
			<dubbo:registry address="zookeeper://127.0.0.1:2181"></dubbo:registry>
		2、配置当前服务的名字
			<dubbo:application name="dubbox_provider"></dubbo:application>
		3、发布服务
			<dubbo:service interface="com.qf.service.HelloService" ref="helloServiceImpl"></dubbo:service>
		4、配置协议和端口
			<dubbo:protocol name="dubbo" port="28080"></dubbo:protocol>	
	3、消费服务：dubbox_consumer
		1、配置zookeeper地址
			<dubbo:registry address="zookeeper://127.0.0.1:2181"></dubbo:registry>
		2、配置当前服务的名字
			<dubbo:application name="dubbox_consumer"></dubbo:application>
		3、引用服务
			<dubbo:reference interface="com.qf.service.HelloService" id="userService"></dubbo:reference>

--------------------------02、检查项管理----------------------------
1、什么是检查项？
    身高、体重、血压、红细胞
2、表结构
    t_checkitem(name,sex,age,price)
3、关键对象
    ajax返回值：
        public class Result{
            Boolean flag;
            String message;
            Object data;
        }
    接收分页参数的对象：
        public class QueryPageBean{
            Integer currentPage;
            Integer pageSize;
            String queryString;
        }
    分页查询返回值的对象：
        public class PageResult{
            Long total;
            List rows;
        }
----------------------------03、检查组管理----------------------------
1、什么是检查组？
    检查组包括多个检查项，例如肝功：体重、身高、抽血、血压
2、表结构
    t_checkgroup(name,remark)：肝功，肾功

    t_checkgroup_checkitem(checkgroup_id,checkitem_id,)

    t_checkitem：抽血，体重
---------------------------04、套餐管理-----------------
1、什么是套餐？
    套餐包括多个检查组，如入职体检：肝功、肾功
2、表结构
    t_setmeal(name、price、img)：入职体检、婚检

    t_setmeal_checkgroup(setmeal_id, checkgroup_id)

    t_checkgroup：肝功、肾功
3、定时任务组件quartz[kwɔːrts，可五奥子]
    1、quartz的核心概念
        job：做什么事
        trigger：什么时候做
        scheduler：什么时候做什么事
    2、spring整合quartz
        1、pom.xml
            spring-context、spring-context-support、spring-tx、quartz
        2、创建任务类
            public class JobDemo2 {
                public void showTime(){
                    System.out.println("现在时刻："+new Date());
                }
            }
        3、applicationContext.xml
                <bean id="jobDemo2" class="com.qf.quartz.JobDemo2"></bean>
                <!--job-->
                <bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
                    <property name="targetObject" ref="jobDemo2"></property>
                    <property name="targetMethod" value="showTime"></property>
                </bean>
                <!--trigger-->
                <bean id="trigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
                    <property name="cronExpression" value="*/1 * * * * ?"></property>
                    <property name="jobDetail" ref="jobDetail"></property>
                </bean>

                <!--scheduler-->
                <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
                    <property name="triggers">
                        <list>
                            <ref bean="trigger"></ref>
                        </list>
                    </property>
                </bean>
        4、测试
            new ClassPathXmlApplicationContext("applicationContext.xml");
4、corn表达式
    格式：Seconds Minutes Hours Day Month Week
    特殊符号：
        *：任意值
        -：范围
        ，：枚举
        /：增量
        ？：忽略
5、定时清理垃圾图片
    1、redis交、并、差集
        差集：sdiff setA setB
        交集：sinter setA setB
        并集：sunion setA setB
    2、思路
        upload：setmeal_pic_reaource 1.jpg 2.jpg 3.jpg
        addSetMeal：setmeal_pic_db_resource 1.jpg 2.jpg
        quartz：
            sdiff setmeal_pic_reaource setmeal_pic_db_resource：3.jpg
            QiNiuYunUtil.deletePic(3.jpg)
            jedis.srem(setmeal_pic_reaource,3.jpg)


---------------------------05、预约设置-----------------
1、什么是预约设置？
    设置每天可以预约的人数
2、表结构
    t_ordersetting(预约日期，可预约人数，已预约人数)
3、基于excel导入
4、基于日历设置
---------------------------06、体检预约-----------------
1、查询套餐列表
    展示套餐基本信息：图片、名称、性别、年龄
2、查询套餐详情
    一个套餐
        多个检查组
            多个检查项
---------------------------07、体检预约-----------------
1、表结构
    体检人信息表：t_member(name、sex、phoneNumber、idCard)
    预约表：t_order(member_id、orderDate、setmeal_id)
